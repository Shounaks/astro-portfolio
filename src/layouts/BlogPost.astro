---
import { type CollectionEntry } from "astro:content";
import { posts } from "../collection";
import BlogPostHead from "../components/BlogPostHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";

type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDate, updatedDate, heroImage, readTime, tags } =
	Astro.props;

function slice2(array: any[], chunk: number, offset: number) {
	var end = offset + chunk,
		out = array.slice(offset, end); // Get the chunk
	if (array.length < end) {
		// If the chunk should wrap
		out = out.concat(array.slice(0, end - array.length)); // Concatenate a the rest of the chunk, from the start of the array, to the output.
	}
	return out;
}
---

<head>
	<BlogPostHead title={title} description={description} />
</head>
<html lang="en">
	<body>
		<Header />
		<main>
			<article>
				<div class="md:grid md:grid-cols-10">
					<div class="col-span-7">
						<div class="prose">
							<div class="flex justify-around print:hidden">
								<a
									href=""
									class="text-gray-800"
									onclick="window.history.go(-1)"
								>
									<div
										class="inline-flex gap-x-1 group hover:bg-slate-300 p-2 rounded-md border-2 border-transparent focus:border-black"
									>
										<img
											src="/icons/arrow-back-outline.svg"
											alt="⬅️"
											class="w-[30px] h-[30px]"
										/>
										<span
											class="align-middle text-center group-hover:text-black"
											>Go Back</span
										>
									</div>
								</a>
								<a href="/blog/" class="text-gray-800">
									<div
										class="inline-flex gap-x-1 group hover:bg-slate-300 p-2 rounded-md border-2 border-transparent focus:border-black"
									>
										<img
											src="/icons/user.svg"
											alt="⬅️"
											class="w-[30px] h-[30px]"
										/>
										<span
											class="align-middle text-center group-hover:text-black"
											>Home</span
										>
									</div>
								</a>
								<a href="/blog/tags/" class="text-gray-800">
									<div
										class="inline-flex gap-x-1 group hover:bg-slate-300 p-2 rounded-md border-2 border-transparent focus:border-black"
									>
										<img
											src="/icons/menu.svg"
											alt="⬅️"
											class="w-[30px] h-[30px]"
										/>
										<span
											class="align-middle text-center group-hover:text-black"
											>Tag Catalog</span
										>
									</div>
								</a>
							</div>
							<div class="title">
								<div class="text-gray-500">
									<FormattedDate date={pubDate} />
									{
										updatedDate && (
											<div class="last-updated-on">
												Last updated on <FormattedDate date={updatedDate} />
											</div>
										)
									}
								</div>
								<h1>{title}</h1>
								<hr />
							</div>
							<slot />
						</div>
					</div>
					<div class="col-span-3 pt-40 print:hidden">
						<div class="md:sticky md:top-10">
							<input
								class="hover:cursor-help w-full bg-zinc-300 rounded-t-md"
								type="button"
								value="Print this page"
								onclick="window.print()"
							/>
							<hr />
							<div id="minute-read" class="pl-2 border-x-2 border-zinc-300">
								<p>Minutes Read</p>
								<div class="inline-flex gap-2 pl-5">
									<img src="/icons/timer.svg" class="w-[30px]" alt="" />
									<p class="pl-1">{readTime ? readTime : "N/A"}</p>
								</div>
							</div>
							<div
								id="other_links"
								class="border-x-2 border-zinc-300 bg-zinc-300"
							>
								<span class="pb-4 pl-2"> Other Posts:</span>
								<ul
									class="px-6 list-disc text-zinc-400 tracking-widest font-extralight pb-4 rounded-b-3xl bg-zinc-100"
								>
									{
										posts
											.filter((post) => post.data.tags.includes(tags[0]))
											.sort((x, y) =>
												x.data.order && y.data.order
													? x.data.order - y.data.order
													: x.data.title.localeCompare(y.data.title)
											)
											.filter((post) => {
												const count = 5;
												let p = posts
													.filter((post) => post.data.tags.includes(tags[0]))
													.sort((x, y) =>
														x.data.order && y.data.order
															? x.data.order - y.data.order
															: x.data.title.localeCompare(y.data.title)
													)
													.flatMap((post) => post.data.title);
												if (post.data.title === title) return true;
												return p.indexOf(post.data.title) - p.indexOf(title) < count && p.indexOf(post.data.title) - p.indexOf(title) > -1 * count;
											})
											.map((post) =>
												post.data.title === title ? (
													<li value={posts.filter((post) => post.data.tags.includes(tags[0])).sort((x, y) => x.data.order && y.data.order ? x.data.order - y.data.order: x.data.title.localeCompare(y.data.title)).flatMap((post) => post.data.title).indexOf(post.data.title) + 1} 
														class="text-black list-[upper-roman] overflow-hidden" style="list-style-position:inside">
														<a
															class="group-hover:text-black underline underline-offset-4 hover:text-black"
															href=""
														>
															{post.data.title}
														</a>
													</li>
												) : (
													<li class="group hover:marker:text-black">
														<a
															class="group-hover:text-black"
															href={`/blog/${post.slug}/`}
														>
															{post.data.title}
														</a>
													</li>
												)
											)
									}
								</ul>
							</div>
							<div id="tags" class="bg-zinc-300 rounded-b-md">
								<p class="p-2">Tags:</p>
								<div class="flex gap-3 pl-5 flex-wrap">
									{
										tags != null && tags.length !== 0 ? (
											tags.map((tag: string) => (
												<a
													href={`/blog/tags/${tag}`}
													class="p-1 px-3 rounded-xl border-2 border-transparent group hover:border-slate-400 border-white mb-2"
												>
													<>
														<span class="border-r-2 border-black text-black">
															#{" "}
														</span>
														<span class="text-slate-400 pl-2 group-hover:text-slate-600">
															{" "}
															{tag}
														</span>
													</>
												</a>
											))
										) : (
											<span class="">N / A</span>
										)
									}
								</div>
							</div>
						</div>
					</div>
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
